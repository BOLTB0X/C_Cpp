#include <iostream>

using namespace std;

//C++는 특정 함수를 호출할때 해당함수의 루틴이 기록된 메모리 주소를 알아야함
//실제 함수가 정의된 메모리 공간을 찾기 위해서는 '바인딩'을 해야함

//일반적으로 함수호출은 컴파일 시기에 고정된 메모리 주소를 이용 ==> 정적 바인딩
//C++ 일반적인 멤버함수는 정적바인딩

//가상함수는 프로그램이 실핼될때 객체를 결정 즉 컴파일 시기에 객체를 특정할 수 없음
//실행시간 때 올바른 함수가 호출/실행될 수 있도록 '동적바인딩'을 사용 
class A {
public:
	virtual void show() { cout << "A클래스입니다." << endl; }
};
class B : public A {
	virtual void show() { cout << "B클래스입니다." << endl; }
};

int main(void) {
	A* p;
	A a;
	B b;
	p = &a; p->show();
	p = &b; p->show(); //여전히 A클래스의 show()함수 호출
	system("pause");
}
//C++ 컴파일러는 가상 함수 테이블을 이용
//가상함수테이블을 가리키는 포인터를 지정하기 위한 멤버를 하나씩 저장
//즉 가상함수테이블 가상함수들의 주소가 저장
//가상함수를 호출하면 C++프로그램은 가상함수테이블에 접근하여 자신이 필요한 함수의 주소를 찾아 호출
// 그것이 =====> 동적 바인딩